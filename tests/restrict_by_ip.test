<?php

/**
 * @File
 * Tests the restrict_by_ip module.
 */

/**
 * Test that IP restrictions work.
 * Assumes that local testing environment has IP address of 127.0.0.1.
 */
class RestrictByIpLoginTests extends BackdropWebTestCase {
  /**
   * @var User
   */
  protected $regularUser;

  /**
   * @var User
   */
  protected $adminUser;

  /**
   * @var string
   */
  protected $cidr;

  public function setUp() {
    // Enable modules needed for these tests.
    parent::setUp('restrict_by_ip');

    // Create a user that we'll use to test logins.
    $this->regularUser = $this->backdropCreateUser();

    // Admin user
    $this->adminUser = $this->backdropCreateUser(array('administer permissions', 'administer users', 'assign roles'));

    $this->cidr = ip_address() . '/32';
  }

  // User can login when users IP matches global range.
  public function testIpMatchGlobal() {
    // Add global IP range.
    config_set('restrict_by_ip.settings', 'login_range', $this->cidr);
    $this->backdropLogin($this->regularUser);
  }

  // User disallowed login outside global range.
  public function testIpDifferGlobal() {
    // Add global IP range.
    config_set('restrict_by_ip.settings', 'login_range', '10.0.0.0/8');
    $this->assertNoLogin();
  }

  // User can login when users IP matchs users range.
  public function testIpMatchUser() {
    // Add in range user IP.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(
      ':uid' => $this->regularUser->uid,
      ':ip' => $this->cidr,
    ));
    $this->backdropLogin($this->regularUser);
  }

  // User disallowed login outside user range.
  public function testIpDifferUser() {
    // Add out of range user IP.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(
      ':uid' => $this->regularUser->uid,
      ':ip' => '10.0.0.0/8',
    ));

    $this->assertNoLogin();
  }

  // User disallowed login when users IP doesn't match global range but matches
  // users range.
  public function testIpDifferGlobalMatchUser() {
    // Add out of range global IP.
    config_set('restrict_by_ip.settings', 'login_range', '10.0.0.0/8');
    // Add in range user IP.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(
      ':uid' => $this->regularUser->uid,
      ':ip' => $this->cidr,
    ));

    $this->assertNoLogin();
  }

  // User disallowed login when users IP doesn't match users range but matches
  // global range.
  public function testIpMatchGlobalDifferUser() {
    // Add out of range global IP.
    config_set('restrict_by_ip.settings', 'login_range', $this->cidr);
    // Add in range user IP.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(
      ':uid' => $this->regularUser->uid,
      ':ip' => '10.0.0.0/8',
    ));

    $this->assertNoLogin();
  }

  // User disallowed login when users IP doesn't match global or users range.
  public function testIpDifferGlobalDiffUser() {
    // Add out of range global IP.
    config_set('restrict_by_ip.settings', 'login_range', '10.0.0.0/8');
    // Add in range user IP.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(
      ':uid' => $this->regularUser->uid,
      ':ip' => '10.0.0.0/8',
    ));

    $this->assertNoLogin();
  }

  // User can login when users IP matches global and users range.
  public function testIpMatchGlobalMatchUser() {
    // Add out of range global IP.
    config_set('restrict_by_ip.settings', 'login_range', $this->cidr);
    // Add in range user IP.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(
      ':uid' => $this->regularUser->uid,
      ':ip' => $this->cidr,
    ));

    $this->backdropLogin($this->regularUser);
  }

  // Test that deleting a user also removes any IP restrictions.
  public function testUserDelete() {
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(
      ':uid' => $this->regularUser->uid,
      ':ip' => '10.0.0.0/8',
    ));

    user_delete($this->regularUser->uid);

    $result = db_query("SELECT restrict_by_ip_address FROM {restrict_by_ip} WHERE uid = :uid", array(
      ':uid' => $this->regularUser->uid,
    ));

    $this->assertEqual($result->rowCount(), 0);
  }

  // Assert user can't login.
  private function assertNoLogin() {
    $edit = array(
      'name' => $this->regularUser->name,
      'pass' => $this->regularUser->pass_raw
    );
    $this->backdropPost('user', $edit, t('Log in'));

    $this->assertNoLink(t('Log out'), 0, t('User %name unsuccessfully logged in.', array('%name' => $this->regularUser->name)), t('User login'));
  }
}

/**
 * Test that role restrictions work.
 * Assumes that local testing environment has IP address of 127.0.0.1.
 */
class RestrictByIpRoleTests extends BackdropWebTestCase {
  /**
   * @var User
   */
  protected $regularUser;

  /**
   * @var User
   */
  protected $adminUser;

  private $role = array();

  /**
   * @var string
   */
  protected $cidr;

  public function setUp() {
    // Enable modules needed for these tests.
    parent::setUp('restrict_by_ip');

    // Create a user that we'll use to test logins.
    $this->regularUser = $this->backdropCreateUser();

    // Admin user
    $this->adminUser = $this->backdropCreateUser(array('administer permissions', 'administer users', 'assign roles'));

    // Need a real IP address which can depend on the testing setup. Give it
    // a possible (likely?) cidr.
    $this->cidr = ip_address() . '/32';

    // Create a role with administer permissions so we can load the user edit,
    // page and test if the user has this role when logged in.
    $rid = $this->backdropCreateRole(array('administer permissions'));
    $roles = user_roles();
    $this->role['name'] = $rid;
    $this->role['label'] = $roles[$rid];

    // Add created role to user.
    $this->regularUser->roles[] = $rid;
    $this->regularUser->save();
  }

  public function testRoleAppliedNoRestrictions() {
    $this->backdropLogin($this->adminUser);
    $this->backdropGet('user/' . $this->regularUser->uid . '/edit');
    $this->assertText($this->role['label']);
  }

  public function testRoleAppliedMatchIP() {
    config_set('restrict_by_ip.settings', 'roles.' . $this->role['name'], $this->cidr);
    $this->backdropLogin($this->adminUser);
    $this->backdropGet('user/' . $this->regularUser->uid . '/edit');
    $this->assertText($this->role['label']);
  }

  public function testRoleDeniedDifferIP() {
    $this->backdropLogin($this->adminUser);
    config_set('restrict_by_ip.settings', 'roles.' . $this->role['name'], '10.0.0.0/8');
    $this->backdropLogin($this->regularUser);
    $this->backdropGet('user/' . $this->regularUser->uid . '/edit');
    $this->assertNoText($this->role['label']);
  }

  public function testUIRoleDeleted() {
    $this->backdropLogin($this->adminUser);

    config_set('restrict_by_ip.settings', 'roles.' . $this->role['name'], $this->cidr);
    $this->backdropGet('admin/config/people/roles/delete/' . $this->role['name']);
    $this->backdropPost(NULL, array(), t('Delete'));
    $this->assertText('The ' . $this->role['label'] . ' role has been deleted.');
    // If we get the default, we know the variable is deleted.
    $ip = config_get('restrict_by_ip.settings', 'roles.' . $this->role['name']);
    if (!$ip) {
      $ip = 'ip default';
    }
    $this->assertEqual($ip, 'ip default', 'IP restriction deleted');
  }
}

/**
 * Test that user is redirected to error page when login denied.
 * Assumes that local testing environment has IP address of 127.0.0.1.
 */
class RestrictByIpRedirectTests extends BackdropWebTestCase {
  /**
   * @var User
   */
  protected $regularUser;

  /**
   * @var User
   */
  protected $adminUser;

  private $loginDeniedNode;

  public function setUp() {
    // Enable modules needed for these tests.
    parent::setUp('restrict_by_ip');

    // Create a user that we'll use to test logins.
    $this->regularUser = $this->backdropCreateUser();

    // Admin user
    $this->adminUser = $this->backdropCreateUser(array('administer permissions', 'administer users', 'assign roles'));

    // Create a page users will get redirected to when denied login.
    $this->loginDeniedNode = $this->backdropCreateNode();
    config_set('restrict_by_ip.settings', 'error_page', 'node/' . $this->loginDeniedNode->nid);
  }

  // User redirected when outside global range and no destination query
  // parameter is present.
  public function testIpDifferGlobalNoDestination() {
    // Add global IP range.
    config_set('restrict_by_ip.settings', 'login_range', '10.0.0.0/8');
    $this->assertRedirected();
  }

  // User redirected when outside user range and no destination query parameter
  // is present.
  public function testIpDifferUserNoDestination() {
    // Add out of range user IP.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(
      ':uid' => $this->regularUser->uid,
      ':ip' => '10.0.0.0/8',
    ));

    $this->assertRedirected();
  }

  // User redirected when outside global range and a destination query parameter
  // is present.
  public function testIpDifferGlobalWithDestination() {
    // Add global IP range.
    config_set('restrict_by_ip.settings', 'login_range', '10.0.0.0/8');
    $this->assertRedirected('node/2');
  }

  // User redirected when outside user range and a destination query parameter
  // is present.
  public function testIpDifferUserWithDestination() {
    // Add out of range user IP.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(
      ':uid' => $this->regularUser->uid,
      ':ip' => '10.0.0.0/8',
    ));

    $this->assertRedirected('node/2');
  }

  // Assert user gets redirected when login denied.
  private function assertRedirected($destination = NULL) {
    $edit = array(
      'name' => $this->regularUser->name,
      'pass' => $this->regularUser->pass_raw
    );

    $options = array();
    if (isset($destination)) {
      $options['query'] = array('destination' => $destination);
    }

    $this->backdropPost('user/login', $edit, t('Log in'), $options);

    $this->assertNoLink(t('Log out'), 0, t('User %name unsuccessfully logged in.', array('%name' => $this->regularUser->name)), t('User login'));

    $this->assertText($this->loginDeniedNode->title, 'Title of login denied page found.');
  }
}

/**
 * Test admin interfaces.
 * Assumes that local testing environment has IP address of 127.0.0.1.
 */
class RestrictByIpUITests extends BackdropWebTestCase {
  /**
   * @var User
   */
  protected $adminUser;

  /**
   * @var string
   */
  protected $cidr;

  public function setUp() {
    // Enable modules needed for these tests.
    parent::setUp('restrict_by_ip');

    // Create admin user that can configure restrict_by_ip module and users.
    $this->adminUser = $this->backdropCreateUser(array('administer restrict by ip', 'administer users'));
    $this->backdropLogin($this->adminUser);

    $this->cidr = ip_address() . '/32';
  }

  // Test validation function on user add form.
  public function testUserRegisterValidation() {
    $form = array();
    $form['name'] = $this->randomName(8);
    $form['mail'] = $this->randomName(5) . '@domain.notatld';
    $form['notify'] = FALSE;
    $pass = $this->randomName(5);
    $form['pass'] = $pass;
    $form['restrict_by_ip_address'] = 'not_an_ip';
    $this->backdropPost('admin/people/create', $form, t('Create new account'));
    $this->assertText('IP Address in Incorrect Format.');
  }

  // Test adding ip restriction while adding a user.
  public function testUserRegisterSubmit() {
    $form = array();
    $form['name'] = $this->randomName(8);
    $form['mail'] = $this->randomName(5) . '@domain.notatld';
    $form['notify'] = FALSE;
    $pass = $this->randomName(5);
    $form['pass'] = $pass;
    $form['restrict_by_ip_address'] = $this->cidr;
    $this->backdropPost('admin/people/create', $form, t('Create new account'));
    $user = user_load_by_name($form['name']);
    $this->assertText(t('Created a new user account for @name. No email has been sent.', array(
      '@name' => $form['name']
    )));
    $this->backdropGet('user/' . $user->uid . '/edit');
    $this->assertFieldByName('restrict_by_ip_address', $form['restrict_by_ip_address']);
  }

  // Test validation function on user edit form.
  public function testUserEditValidation() {
    $user = $this->backdropCreateUser();
    $this->backdropGet('user/' . $user->uid . '/edit');
    $this->assertFieldByName('restrict_by_ip_address', '');

    $form = array();
    $form['restrict_by_ip_address'] = 'not_an_ip';
    $this->backdropPost('user/' . $user->uid . '/edit', $form, t('Save'));
    $this->assertText('IP Address in Incorrect Format.');
    $this->assertNoText('The changes have been saved.');
  }

  // Test changing ip restrictions on user edit form.
  public function testUserEditSubmit() {
    $user = $this->backdropCreateUser();
    $this->backdropGet('user/' . $user->uid . '/edit');
    $this->assertFieldByName('restrict_by_ip_address', '');

    $form = array();
    $form['restrict_by_ip_address'] = $this->cidr;
    $this->backdropPost('user/' . $user->uid . '/edit', $form, t('Save'));
    $this->assertText('The changes have been saved.');
    $this->backdropGet('user/' . $user->uid . '/edit');
    $this->assertFieldByName('restrict_by_ip_address', $form['restrict_by_ip_address']);
  }

  // Test validation function on admin/config/people/restrict_by_ip/login/edit/%.
  public function testAdminUserValidation() {
    $user = $this->backdropCreateUser();
    $form = array();
    $form['restriction'] = 'not_an_ip';
    $this->backdropPost('admin/config/people/restrict_by_ip/login/edit/' . $user->uid, $form, t('Save restriction'));
    $this->assertText('IP Address in Incorrect Format.');
  }

  // Test changing ip restrictions on admin/config/people/restrict_by_ip/login/edit/%.
  public function testAdminUserSubmit() {
    $user = $this->backdropCreateUser();
    $form = array();
    $form['restriction'] = $this->cidr;
    $this->backdropPost('admin/config/people/restrict_by_ip/login/edit/' . $user->uid, $form, t('Save restriction'));
    $this->assertText('User restriction has been saved.');
    $this->backdropGet('admin/config/people/restrict_by_ip/login/edit/' . $user->uid);
    $this->assertFieldByName('restriction', $form['restriction']);
  }

  // Test validation on restrict login by ip settings form.
  public function testLoginByIpSettingsValidation() {
    $form = array();
    $form['login_range'] = 'not_an_ip';
    $this->backdropPost('admin/config/people/restrict_by_ip/login', $form, t('Save configuration'));
    $this->assertText('IP Address in Incorrect Format.');
  }

  // Test restrict login by ip settings form.
  public function testLoginByIpSettingsSubmit() {
    $form = array();
    $form['error_page'] = 'about';
    $form['login_range'] = $this->cidr;
    $this->backdropPost('admin/config/people/restrict_by_ip/login', $form, t('Save configuration'));
    $this->assertText('The configuration options have been saved.');
    $this->assertFieldByName('error_page', $form['error_page']);
    $this->assertFieldByName('login_range', $form['login_range']);
  }

  // Test validation on restrict role by ip settings form.
  public function testRoleByIpSettingsValidation() {
    // Create a role to test.
    $rid = $this->backdropCreateRole(array('access content'));

    $form = array();
    $form['role_' . $rid] = 'not_an_ip';
    $this->backdropPost('admin/config/people/restrict_by_ip/role', $form, t('Save configuration'));
    $this->assertText('IP Address in Incorrect Format.');
  }

  // Test restrict role by ip settings form.
  public function testRoleByIpSettingsSubmit() {
    // Create a role to test.
    $rid = $this->backdropCreateRole(array('access content'));

    $form = array();
    $form['role_' . $rid] = $this->cidr;
    $this->backdropPost('admin/config/people/restrict_by_ip/role', $form, t('Save configuration'));
    $this->assertText('The configuration options have been saved.');
    $this->assertFieldByName('role_' . $rid, $form['role_' . $rid]);
  }
}

class RestrictByIpUnitTestCase extends BackdropUnitTestCase {

  public function setUp() {
    backdrop_load('module', 'restrict_by_ip');
    parent::setUp();
  }

  public function testRestrictByIpUnitTestIpValidation() {
    $result = _restrict_by_ip_validate_ip('string');
    $this->assertFalse($result['result'], 'Not an IP address');

    $result = _restrict_by_ip_validate_ip('127.0.0.1');
    $this->assertFalse($result['result'], 'Missing CIDR mask');

    $result = _restrict_by_ip_validate_ip('127.0.1');
    $this->assertFalse($result['result'], 'Not enough octets');

    $result = _restrict_by_ip_validate_ip('127.0.0.1/8');
    $this->assertFalse($result['result'], 'Invalid /8');

    $result = _restrict_by_ip_validate_ip('127.0.0.0/8');
    $this->assertTrue($result['result'], 'Valid /8');

    $result = _restrict_by_ip_validate_ip('127.0.0.1/16');
    $this->assertFalse($result['result'], 'Invalid /16');

    $result = _restrict_by_ip_validate_ip('127.1.0.0/16');
    $this->assertTrue($result['result'], 'Valid /16');

    $result = _restrict_by_ip_validate_ip('127.0.0.1/24');
    $this->assertFalse($result['result'], 'Invalid /24');

    $result = _restrict_by_ip_validate_ip('127.1.1.0/24');
    $this->assertTrue($result['result'], 'Valid /24');

    $result = _restrict_by_ip_validate_ip('127.0.0.1/32');
    $this->assertTrue($result['result'], 'Valid /32');

    $result = _restrict_by_ip_validate_ip('192.0.0.0/8;192.0.0.1/8');
    $this->assertFalse($result['result'], 'Validate multiple addresses with errors');

    $result = _restrict_by_ip_validate_ip('192.0.0.0/8;192.0.0.0/8');
    $this->assertTrue($result['result'], 'Validate multiple addresses with no errors');

    $result = _restrict_by_ip_validate_ip('not.an.ip.address/8');
    $this->assertFalse($result['result'], 'Invalid octets');

    $result = _restrict_by_ip_validate_ip('192.168.256.1/32');
    $this->assertFalse($result['result'], 'Out of range otctet');

    $result = _restrict_by_ip_validate_ip('192.168.-1.1/32');
    $this->assertFalse($result['result'], 'Out of range otctet');

    $result = _restrict_by_ip_validate_ip('127.0.0.1/octet');
    $this->assertFalse($result['result'], 'Invalid CIDR mask');

    $result = _restrict_by_ip_validate_ip('127.0.0.1/33');
    $this->assertFalse($result['result'], 'Out of range CIDR mask');

    $result = _restrict_by_ip_validate_ip('127.0.0.1/-1');
    $this->assertFalse($result['result'], 'Out of range CIDR mask');
  }
}
