<?php

/**
 * @file
 * Allows the admin to select which IP addresses role or a user can login from
 * for this site.
*/

/**
 * Implementation of hook_menu().
 */
function restrict_by_ip_menu() {
  $items = array();
  $items['admin/config/people/restrict_by_ip'] = array(
    'title' => t('Restrict by IP'),
    'description' => t('Settings for Restrict by IP module.'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('restrict_by_ip_login_settings'),
    'access arguments' => array('administer restrict by ip'),
  );
  $items['admin/config/people/restrict_by_ip/login'] = array(
    'title' => t('Restrict login by IP'),
    'description' => t('Limit the IP address a user is allowed to login from.'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('restrict_by_ip_login_settings'),
    'access arguments' => array('administer restrict by ip'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/people/restrict_by_ip/login/add'] = array(
    'title' => t('Add new login IP restriction'),
    'description' => t('Add a new IP restriction to a user.'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('restrict_by_ip_login_add_edit_user'),
    'access arguments' => array('administer restrict by ip'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/people/restrict_by_ip/login/edit/%user'] = array(
    'title' => t('Edit existing login IP restriction'),
    'description' => t('Edit an existing IP restriction for a user.'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('restrict_by_ip_login_add_edit_user', 6),
    'access arguments' => array('administer restrict by ip'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/people/restrict_by_ip/role'] = array(
    'title' => t('Restrict role by IP'),
    'description' => t('Limit the IP address range roles may accessed from.'),
    'page callback' => t('backdrop_get_form'),
    'page arguments' => array('restrict_by_ip_role_settings'),
    'access arguments' => array('administer restrict by ip'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function restrict_by_ip_permission() {
  return array(
    'administer restrict by ip' => array(
      'title' => t('Administer restrict by ip'),
      'description' => t('Create, edit and delete rules for restricted IP login.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function restrict_by_ip_config_info() {
  $prefixes['restrict_by_ip.settings'] = array(
    'label' => t('Restrict by IP'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implmentation of hook_init().
 */
function restrict_by_ip_init() {
  global $user;
  // Login restriction check moved here to prevent access from stale session
  // data.
  _restrict_by_ip_login($user);
}

/**
 * Implementation of hook_boot().
 */
function restrict_by_ip_boot() {
  global $user;
  // Call the function early in boot process to check/strip roles.
  restrict_by_ip_role_check($user);
}

/**
 * Implementation of hook_user_login().
 */
function restrict_by_ip_user_login(&$edit, &$account) {
  _restrict_by_ip_login($account);
}

/**
 * Implementation of hook_user_insert().
 */
function restrict_by_ip_user_insert($account) {
  if (isset($account->restrict_by_ip_address) && strlen($account->restrict_by_ip_address) > 0) {
    // If an IP restriction is set, add it to database.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(':uid' => $account->uid, ':ip' => $account->restrict_by_ip_address));
  }
}

/**
 * Implementation of hook_user_delete().
 */
function restrict_by_ip_user_delete($account) {
  if ($account->uid != 0) {
    db_query("DELETE FROM {restrict_by_ip} WHERE uid = :uid", array(':uid' => $account->uid));
  }
}

/**
 * Implementation of hook_theme().
 */
function restrict_by_ip_theme($existing, $type, $theme, $path) {
  return array(
    'restrict_by_ip_login_list' => array(),
  );
}

/**
 * Implmentation of hook_form_alter().
 */
function restrict_by_ip_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {
    // Add restrict by ip form fields to user add/edit form.
    if (user_access('administer site configuration') || user_access('administer restrict by ip')) {
      $address_entry = '';

      if ($form_id == 'user_profile_form') {
        $uid = $form['#user']->uid;
        $form['#validate'][] = 'restrict_by_ip_user_profile_validate';
        $form['#submit'][] = 'restrict_by_ip_user_profile_submit';

        // Grab the current restrict by ip data if it exists.
        $address_entry = db_query('SELECT restrict_by_ip_address FROM {restrict_by_ip} WHERE uid = :uid', array(
          ':uid' => $uid
        ))->fetchField();
      }
      else {
        $form['#validate'][] = 'restrict_by_ip_user_profile_validate';
      }

      $form['rip'] = array(
        '#type'          => 'fieldset',
        '#attributes'    => array('class' => array('restrict-by-ip')),
        '#title'         => t('Restrict by IP settings'),
        '#weight'        => 5,
        '#collapsible'   => FALSE,
      );
      $form['rip']['restrict_by_ip_address'] = array(
        '#type'          => 'textfield',
        '#default_value' => $address_entry,
        '#maxlength'     => NULL,
        '#description'   => t('Enter IP Address Ranges in CIDR Notation separated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting" target="_blank">click here</a>.<br /><strong>Leave field empty to disable IP restrictions for this user.</strong>'),
      );
    }
  }
}

/**
 * Menu callback for restrict login settings
 */
function restrict_by_ip_login_settings() {
  $config = config('restrict_by_ip.settings');
  backdrop_set_title(t('Restrict login by IP'));
  $form = array();
  $form['#config'] = 'restrict_by_ip.settings';
  $form['current_ip'] = array(
    '#markup' => t('Your current IP address is %ipaddress.', array('%ipaddress' => _restrict_by_ip_get_ip())),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $form['error_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Login denied error page'),
    '#description'    => t("This the address of the page to which the user will be redirected if they are not allowed to login. If you don't set this the user will not know why they couldn't login"),
    '#default_value' => $config->get('error_page'),
  );
  $form['login_range'] = array(
    '#type' => 'textfield',
    '#title' => t('Restrict global login to allowed IP range'),
    '#maxlength' => NULL,
    '#description' => t('To restrict login for ALL users, enter global IP Address Ranges in CIDR Notation separated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation click <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting">here</a>.<br />Leave field blank to disable IP restrictions for user login.'),
    '#default_value' => $config->get('login_range'),
  );
  $form['ip_list'] = array(
    '#type' => 'fieldset',
    '#title' => t('Current login restrictions'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['ip_list']['list'] = array(
    '#markup' => theme('restrict_by_ip_login_list'),
  );
  return system_settings_form($form);
}

/**
 * Validation function for global ip restriction settings
 */
function restrict_by_ip_login_settings_validate($form, &$form_state) {
  if (strlen($form_state['values']['login_range']) > 0) {
    $ret = _restrict_by_ip_validate_ip($form_state['values']['login_range']);
    if ($ret['result'] == FALSE) {
      form_set_error('login_range', t(implode('<br />', $ret['messages'])));
    }
  }
}

/**
 * Form callback to add/edit user IP restriction.
 */
function restrict_by_ip_login_add_edit_user($form, &$form_state, $account = NULL) {
  $form = array();
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#maxlength' => 60,
    '#autocomplete_path' => $account ? NULL : 'user/autocomplete',
  );
  $form['restriction'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed IP range'),
    '#description' => t('Enter IP Address Ranges in CIDR Notation separated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation click <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting">here</a>.'),
    '#maxlength' => NULL,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save restriction'),
    '#suffix' => l('Cancel', 'admin/config/people/restrict_by_ip/login'),
  );
  // Set up defaults if editing an existing restriction.
  if ($account) {
    $restriction = db_query("SELECT restrict_by_ip_address FROM {restrict_by_ip} WHERE uid = :uid", array(':uid' => $account->uid))->fetchField();
    $form['name']['#value'] = $account->name;
    $form['name']['#disabled'] = TRUE;
    $form['name']['autocomplete_path'] = NULL;
    $form['restriction']['#default_value'] = $restriction;
    $form['restriction']['#description'] .= t('<br />Leave field blank to remove restriction.');
  }
  return $form;
}

/**
 * Validation function for add/edit login IP restriction form.
 */
function restrict_by_ip_login_add_edit_user_validate($form, &$form_state) {
  // Check for valid user.
  $uid = db_query("SELECT uid FROM {users} WHERE name= :name", array(':name' => $form_state['values']['name']))->fetchField();
  if (!$uid) {
    form_set_error('name', t('Invalid user.'));
  }
  if (strlen($form_state['values']['restriction']) > 0) {
    $ret = _restrict_by_ip_validate_ip($form_state['values']['restriction']);
    if ($ret['result'] == FALSE) {
      form_set_error('restriction', t(implode('<br />', $ret['messages'])));
    }
  }
}

/**
 * Submit function for add/edit new login IP restriction form.
 */
function restrict_by_ip_login_add_edit_user_submit($form, &$form_state) {
  $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $form_state['values']['name']))->fetchField();
  // Remove any existing settings
  db_query("DELETE FROM {restrict_by_ip} WHERE uid = :uid", array(':uid' => $uid));
  // Insert new settings
  if (strlen($form_state['values']['restriction']) > 0) {
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(':uid' => $uid, ':ip' => $form_state['values']['restriction']));
  }
  backdrop_set_message("User restriction has been saved.");
}

/**
 * Menu callback for restrict role settings
 */
function restrict_by_ip_role_settings() {
  $config = config('restrict_by_ip.settings');
  backdrop_set_title(t('Restrict role by IP'));
  $form = array();
  // Get all roles except anonymous and authenticated.
  $user_roles = user_roles(TRUE);
  unset($user_roles['authenticated']);

  if (count($user_roles) === 0) {
    $form['no_roles'] = array(
      '#markup' => t('No roles configured. <a href="@add-role">Add a role</a>.', array('@add-role' => url('admin/people/permissions/roles'))),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
  }

  foreach ($user_roles as $rid => $label) {
    $form['role_wrapper_' . $rid] = array(
      '#type' => 'fieldset',
      '#title' => t($label),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['role_wrapper_' . $rid]['role_' . $rid] = array(
      '#type' => 'textfield',
      '#title' => t('Allowed IP range'),
      '#maxlength' => NULL,
      '#description' => t('Enter IP Address Ranges in CIDR Notation separated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation click <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting">here</a>.<br />Leave field blank to disable IP restrictions for ' . $label),
      '#default_value' => $config->get('roles.' . $rid),
    );
  }

  $form['actions'] = array(
    '#type' => 'actions'
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  return $form;
}

/**
 * Validation function for role ip restriction settings
 */
function restrict_by_ip_role_settings_validate($form, &$form_state) {
  foreach ($form_state['values'] as $key => $value) {
    if (strpos($key, 'role_') !== FALSE && strlen($value) > 0) {
      $ret = _restrict_by_ip_validate_ip($value);
      if ($ret['result'] == FALSE) {
        form_set_error($key, t(implode('<br />', $ret['messages'])));
      }
    }
  }
}

/**
 * Submit handler for role ip restriction settings
 */
function restrict_by_ip_role_settings_submit($form, &$form_state) {
  $config = config('restrict_by_ip.settings');
  foreach ($form_state['values'] as $key => $value) {
    if (strpos($key, 'role_') !== FALSE && strlen($value) > 0) {
      $config->set('roles.' . str_replace('role_', '', $key), $value);
    }
  }
  backdrop_set_message(t('The configuration options have been saved.'));
  $config->save();
}

/**
 * Custom validation function for the user_profile_form page.
 */
function restrict_by_ip_user_profile_validate($form, &$form_state) {
  if (strlen($form_state['values']['restrict_by_ip_address']) > 0) {
    $ret = _restrict_by_ip_validate_ip($form_state['values']['restrict_by_ip_address']);
    if ($ret['result'] == FALSE) {
      form_set_error('restrict_by_ip_address', t(implode('<br />', $ret['messages'])));
    }
  }
}

/**
 * Custom submit function for the user_profile_form page.
 */
function restrict_by_ip_user_profile_submit($form, &$form_state) {
  // Remove any existing restrictions.
  db_query("DELETE FROM {restrict_by_ip} WHERE uid = :uid", array(':uid' => $form['#user']->uid));
  if (strlen($form_state['values']['restrict_by_ip_address']) > 0) {
    // Add new restrictions.
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :ip)", array(':uid' => $form['#user']->uid, ':ip' => $form_state['values']['restrict_by_ip_address']));
  }
}

/**
 * Implements hook_user_role_delete().
 *
 * Delete role IP restirctions when a role is deleted.
 */
function restrict_by_ip_user_role_delete($role) {
  config_clear('restrict_by_ip.settings', 'roles.' . $role->name);
}

/**
 * Perform an IP restriction check for all roles belonging to the given user.
 */
function restrict_by_ip_role_check(&$user) {
  $config = config('restrict_by_ip.settings');
  $ip2check = _restrict_by_ip_get_ip();
  // Check each role belonging to specified user.
  foreach ($user->roles as $rid => $label) {
    $ranges = $config->get('roles.' . $rid);
    // Only check IP if an IP restriction is set for this role.
    if (strlen($ranges) > 0) {
      $ipaddresses = explode(';', $ranges);
      $match = FALSE;
      foreach ($ipaddresses as $ipaddress) {
        if (_restrict_by_ip_cidrcheck($ip2check, $ipaddress)) {
          $match = TRUE;
        }
      }
      if (!$match) {
        unset($user->roles[$rid]);
      }
    }
  }
}

/**
 * Checks the user's ip address on login
 *
 * If they are not restricted, or logging in from the appropriate address
 * allow logon to continue. If not redirect to a designated page.
 */
function _restrict_by_ip_login(&$user) {
  $config = config('restrict_by_ip.settings');
  if ($user->uid != 0) {
    $ip2check = _restrict_by_ip_get_ip();

    // Check for global login IP restrictions and validate against.
    $global_data = $config->get('login_range');
    if (strlen($global_data) > 0) {
      $valid = FALSE;
      $ipaddresses = explode(';', $global_data);
      if (is_array($ipaddresses)) {
        foreach ($ipaddresses as $ipaddress) {
          if (_restrict_by_ip_cidrcheck($ip2check, $ipaddress)) {
            $valid = TRUE;
          }
        }
      }
      if (!$valid) {
        // Log the error with the ip address.
        watchdog('user', t('Session closed for %name - Invalid IP. '.$ip2check, array('%name' => $user->name)));
        // Destroy the current session.
        session_destroy();
        module_invoke_all('user', 'logout', NULL, $user);
        // Load the anonymous user.
        $user = backdrop_anonymous_user();
        // unset destination required to force them to the ip page during
        // backdrop_goto().
        if (isset($_GET['destination'])) {
          unset($_GET['destination']);
        }
        // Goto the page detailed in the site configuration - restrict by ip -
        // settings page.
        backdrop_goto($config->get('error_page'));
      }
    }

    // Check for individual user IP restrictions and validate against them.
    $usrdata = db_query('SELECT * FROM {restrict_by_ip} WHERE uid = :uid', array(':uid' => $user->uid))->fetchObject();
    $logonvalid = FALSE;
    // If the user has restrict by ip address set.
    if ($usrdata) {
      $ipaddresses = explode(";", $usrdata->restrict_by_ip_address);
      // Check each valid ip address in database against users ip address.
      // If one matches allow logon.
      foreach ($ipaddresses as $ipaddress) {
        if (_restrict_by_ip_cidrcheck($ip2check, $ipaddress)) {
          $logonvalid = TRUE;
        }
      }
      // Restrict by ip address is set and no addresses match users ip address.
      if (!$logonvalid) {
        // Log the error with the ip address.
        watchdog('user', t('Session closed for %name - Invalid IP. '.$ip2check, array('%name' => $user->name)));
        // Destroy the current session.
        session_destroy();
        module_invoke_all('user', 'logout', NULL, $user);
        // Load the anonymous user.
        $user = backdrop_anonymous_user();
        // Unset destination required to force them to the ip page during
        // backdrop_goto().
        if (isset($_GET['destination'])) {
          unset($_GET['destination']);
        }
        // Goto the page detailed in the site configuration - restrict by ip -
        // settings page.
        backdrop_goto($config->get('error_page'));
      }
    }
  }
}

/**
 * Returns the IP address of the user, taking into account header configuration.
 */
function _restrict_by_ip_get_ip() {
  $ip_address = ip_address();

  /**
   * Warning: Using this hook has security implications. Providing a wrong IP
   * address could allow users to bypass IP restrictions.
   */
  backdrop_alter('restrict_by_ip_get_ip', $ip_address);

  return $ip_address;
}

/**
 * This function just makes sure the user input for the ip address
 * section is valid.
 */
function _restrict_by_ip_validate_ip($ip_address) {
  $ret = array('result' => TRUE, 'messages' => array());
  $ipaddresses = explode(";", $ip_address);

  // Check each ip address individually.
  foreach ($ipaddresses as $ipaddress) {
    // Separate in to address and cidr mask.
    $cidr = explode("/", $ipaddress);
    // Check address and cidr mask entered.
    if (count($cidr) == 2) {
      $ipaddr = explode(".", $cidr[0]);
      // Check four octets entered.
      if (count($ipaddr) == 4) {
        // Check each octet is valid - numeric and 0 < value < 255.
        for ($i=0; $i<count($ipaddr); $i++) {
          if ((!is_numeric($ipaddr[$i])) || ($ipaddr[$i] < 0) || ($ipaddr[$i] > 255)) {
            $ret['messages'][] .= 'Illegal value for an IP Address. Each IP Address must be valid.  Check IP Address ' . $ipaddress;
            $ret['result'] = FALSE;
          }
        }
        // Check cidr mask value - numeric and 0 < value < 33.
        if((!is_numeric($cidr[1])) || ($cidr[1]<1) || ($cidr[1]>32)) {
          $ret['messages'][] .= 'Illegal value for CIDR. Please correct CIDR with value of ' . $ipaddress;
          $ret['result'] = FALSE;
        }
      }
      else {
        $ret['messages'][] .= 'IP Address Incorrect Number of Octets. Check IP Address ' . $ipaddress;
        $ret['result'] = FALSE;
      }
    }
    else {
      $ret['messages'][] .= 'IP Address in Incorrect Format. Check IP Address ' . $ipaddress;
      $ret['result'] = FALSE;
    }

    // Check the validity of the network address in the given CIDR block,
    // by ensuring that the network address part is valid within the
    // CIDR block itself. If it's not, the notation is invalid.
    if ($ret['result'] && !_restrict_by_ip_cidrcheck($cidr[0], $ipaddress)) {
      $ret['messages'][] .= 'The network address in the "'. $ipaddress . '" block is not valid.';
      $ret['result'] = FALSE;
    }

  }
  return $ret;
}

/**
 * Check ip address against a network in cidr notation. E.g:
 * _restrict_by_ip_cidrcheck('192.168.10.100','192.168.10.0/24'); returns 1
 * _restrict_by_ip_cidrcheck('192.168.10.100','192.168.12.0/24'); returns 0
 */
function _restrict_by_ip_cidrcheck($iptocheck, $ipslashcidr) {
  // Separate ip address and cidr mask.
  $netmask = explode("/", $ipslashcidr);
  // Get valid network as long.
  $ip_net = ip2long($netmask[0]);
  // Get valid network mask as long.
  $ip_mask = ~((1 << (32 - $netmask[1])) - 1);
  // Get ip address to check as long.
  $ip_ip = ip2long($iptocheck);
  // Mask ip address to check to get subnet.
  $ip_ip_net = $ip_ip & $ip_mask;
  // Only returns 1 if the valid network and the subnet of the ip address to
  // check are the same.
  return ($ip_ip_net == $ip_net);
}

/**
 * Theme function to return a list of existing IP restrictions on user login.
 */
function theme_restrict_by_ip_login_list() {
  $header = array(t("Username"), t("IP Restriction"), t("Edit"));
  $rows = array();
  $output = '';

  // Handle user one as a special case.
  $row = db_query("SELECT u.name, rbi.restrict_by_ip_address as restriction FROM {users} u LEFT JOIN {restrict_by_ip} rbi ON rbi.uid = u.uid WHERE u.uid = 1 ")->fetchObject();
  $rows[] = array($row->name . ' (BACKDROP USER 1)', isset($row->restriction) ? $row->restriction : '<strong><span style="color: red">No Restriction</span></strong>', l('edit', 'admin/config/people/restrict_by_ip/login/edit/1', array('query' => array('destination' => 'admin/config/people/restrict_by_ip/login'))));

  // Grab all other restrictions and list beneath.
  $result = db_query("SELECT u.name, rbi.uid, rbi.restrict_by_ip_address as restriction FROM {restrict_by_ip} rbi INNER JOIN {users} u ON rbi.uid = u.uid WHERE u.uid != 1 ORDER BY rbi.uid ASC");
  foreach ($result as $row) {
    $rows[] = array($row->name, $row->restriction, l('edit', 'admin/config/people/restrict_by_ip/login/edit/' . $row->uid, array('query' => array('destination' => 'admin/config/people/restrict_by_ip/login'))));
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  $output .= l('Add new IP restriction for user', 'admin/config/people/restrict_by_ip/login/add', array('query' => array('destination' => 'admin/config/people/restrict_by_ip/login')));
  return $output;
}
